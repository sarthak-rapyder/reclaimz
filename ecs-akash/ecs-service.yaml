AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create ECS taskexecutionRole, ECS Service, TaskDefinition.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'Project Name and Environment'
        Parameters:
          - ProjectName
          - Environment
          - TenantType
      - Label:
          default: 'ECS Parameters'
        Parameters:
          - VPCId
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PublicLoadBalancerSGId
          - PublicListener 
          - ECSCluster
          - ServiceName
          - ImageUrl
          - ContainerPort
          - ContainerCpu
          - ContainerMemory
          - Path
          - Priority
          - DesiredCount
          - Namespace
Parameters:
  ProjectName:
    Description: Name of the Project (ex- rczf, rczh)
    Type: String  
  Environment:
    Description: Environment (ex- dev, staging, qa, prod)
    Type: String  
  TenantType:
    Description: Tenant Type of the project (ex- finance, health)
    Type: String  
  VPCId:
    Description: The VPC ID here.
    Type: String 
  PrivateSubnet1ID:
    Description: The Private Subnet ID-1 in AZ 1a here.
    Type: String    
  PrivateSubnet2ID:
    Description: The Private Subnet ID-2 in AZ 1b here.
    Type: String
  PublicLoadBalancerSGId:
    Description: The Security Group ID of PublicLoadBalancer.
    Type: String
  PublicListener:  
    Description: The ARN of the public load balancer's Listener.
    Type: String    
  ECSCluster:
    Description: "Name of the ECS cluster deployed"
    Type: String
  ServiceName:
    Description: A name for the service
    Type: String
    Default: nginx
  ImageUrl:
    Description: The url of a docker image that contains the application process that will handle the traffic for this service
    Type: String
    Default: nginx
  ContainerPort:
    Description: What port number the application inside the docker container is binding to
    Type: Number
    Default: 80
  ContainerCpu:
    Description: How much CPU to give the container. 1024 is 1 CPU
    Type: Number
    Default: 256
  ContainerMemory:
    Description: How much memory in megabytes to give the container
    Type: Number
    Default: 512
  Path:
    Description: A path on the public load balancer that this service should be connected to. Use * to send all load balancer traffic to this service.
    Type: String
    Default: '*'
  Priority:
    Description: The priority for the routing rule added to the load balancer. This only applies if your have multiple services which have been assigned to different paths on the load balancer.
    Type: Number
    Default: 1
  DesiredCount:
    Description: How many copies of the service task to run
    Type: Number
    Default: 1
  Namespace:
    Description: Enter the Name of Namespace
    Type: String
    Default: ""

# Conditions:
#   HasCustomRole: !Not
#     - !Equals
#       - !Ref Role
#       - ""

Resources:
#ECStaskexecutionRole
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref ClusterName, "ECSTaskExecution-Role" ] ]    
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join [ "-", [ !Ref ProjectName, !Ref Environment, "ecs-taskdefinition" ] ]
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Essential: true
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Name: !Join [ "-", [ !Ref ServiceName, "port" ] ]
  
  # ECS Service Security Group
  EcsServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      GroupName: !Join [ "-", [ !Ref ServiceName, "sg" ] ]
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - SourceSecurityGroupId: !Ref PublicLoadBalancerSGId
          #CidrIp: !Ref VPCCIDR
          IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort   
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "sg" ] ]
        - Key: Environment
          Value: !Ref Environment
        - Key: TenantType  
          Value: !Ref TenantType
        - Key: Project
          Value: !Ref ProjectName                

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Join [ "-", [ !Ref ProjectName, !Ref Environment, "ecs-service" ] ]
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Ref Namespace
        Services:
          - PortName: !Join [ "-", [ !Ref ServiceName, "port" ] ]
            ClientAliases:
              - Port: !Ref ContainerPort
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsServiceSG
          Subnets:
            - !Ref PrivateSubnet1ID
            - !Ref PrivateSubnet2ID
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join [ "-", [ !Ref ProjectName, !Ref Environment, "targetgroup" ] ]
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPCId

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      ListenerArn: !Ref PublicListener
      Priority: !Ref Priority
  
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ServiceNamespace: ecs
      # ResourceId: !Join [ "/", [ "service", !Ref ECSCluster, ${Service.Name} ] ]
      ResourceId: !Sub "service/rczf-staging-ecs-cluster/${Service.Name}"
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: 1
      MaxCapacity: 3
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"

  WebAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AutoScaling-Policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70

Outputs:
  ECSTaskExecutionRole:
    Description: The ARN of the ECS Task execution role
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Join
        - ':'
        - - !Ref AWS::StackName
          - ECSTaskExecutionRole        