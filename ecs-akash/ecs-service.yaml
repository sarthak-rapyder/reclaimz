AWSTemplateFormatVersion: "2010-09-09"

Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.

Parameters:

  ProjectName:
    Description: The Project name here.
    Type: String
    Default: ""

  Environment:
    Description: The Environment name here.
    Type: String
    Default: ""

  ServiceName:
    Description: A name for the service
    Type: String
    Default: nginx

  ImageUrl:
    Description: The url of a docker image that contains the application process that will handle the traffic for this service
    Type: String
    Default: nginx

  ContainerPort:
    Description: What port number the application inside the docker container is binding to
    Type: Number
    Default: 80

  ContainerCpu:
    Description: How much CPU to give the container. 1024 is 1 CPU
    Type: Number
    Default: 256

  ContainerMemory:
    Description: How much memory in megabytes to give the container
    Type: Number
    Default: 512

  Path:
    Description: A path on the public load balancer that this service should be connected to. Use * to send all load balancer traffic to this service.
    Type: String
    Default: '*'

  Priority:
    Description: The priority for the routing rule added to the load balancer. This only applies if your have multiple services which have been assigned to different paths on the load balancer.
    Type: Number
    Default: 1

  DesiredCount:
    Description: How many copies of the service task to run
    Type: Number
    Default: 1

  ServiceDnsName:
    Description: Service connect internal DNS name
    Type: String
    Default: ""

Conditions:
  HasCustomRole: !Not
    - !Equals
      - !Ref Role
      - ""

Resources:
  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join [ "-", [ !Ref ProjectName, !Ref Environment, "ecs-taskdefinition" ] ]
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !ImportValue
        Fn::Join:
          - ':'
          - - !Ref StackName
            - ECSTaskExecutionRole
      TaskRoleArn: !If
        - HasCustomRole
        - !Ref Role
        - !Ref AWS::NoValue
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Essential: true
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
  
  # ECS Service Security Group
  EcsServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      GroupName: !Join [ "-", [ !Ref ProjectName, !Ref Environment, "ecs-sg" ] ]
      VpcId: !ImportValue
        Fn::Join:
          - ':'
          - - !Ref StackName
            - VPCId
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: !ImportValue
        Fn::Join:
          - ':'
          - - !Ref StackName
            - VPC
            - CIDR
          IpProtocol: !Ref ContainerPort
      SecurityGroupEgress:
        # Allow access all traffic from VPC to the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Join [ "-", [ !Ref ProjectName, !Ref Environment, "ecs-service" ] ]
      Cluster: !ImportValue
        Fn::Join:
          - ':'
          - - !Ref StackName
            - ClusterName
      LaunchType: FARGATE
      ServiceConnectConfiguration:
        Enabled: true
        Services:
          - PortName: !Ref ServiceDnsName
            ClientAliases:
              - Port: !Ref ContainerPort
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !ImportValue
              Fn::Join:
                - ':'
                - - !Ref StackName
                  - FargateContainerSecurityGroup
          Subnets:
            - !ImportValue
              Fn::Join:
                - ':'
                - - !Ref StackName
                  - PrivateSubnetOne
            - !ImportValue
              Fn::Join:
                - ':'
                - - !Ref StackName
                  - PrivateSubnetTwo
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join [ "-", [ !Ref ProjectName, !Ref Environment, "targetgroup" ] ]
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue
        Fn::Join:
          - ':'
          - - !Ref StackName
            - VPCId

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      ListenerArn: !ImportValue
        Fn::Join:
          - ':'
          - - !Ref StackName
            - PublicListener
      Priority: !Ref Priority
  
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ServiceNamespace: ecs
      ResourceId: !Sub "service/${ECSCluster}/${ECSService.Name}"
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: 1
      MaxCapacity: 3
      RoleARN: `!Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"

  WebAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WebAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70