AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template for Private ECS Fargate Cluster with ALB, Services, Task Definitions, and Service Connect'

Parameters:
  VpcId:
    Description: "VPC ID"
    Type: String
  PrivateSubnet1Id:
    Description: "Private Subnet 1 ID"
    Type: String
  PrivateSubnet2Id:
    Description: "Private Subnet 2 ID"
    Type: String
  KeyName:
    Description: "EC2 Key Pair for SSH access"
    Type: String
    Default: ""
  ClusterName:
    Description: "Name of the ECS cluster"
    Type: String
    Default: "my-ecs-cluster"
  ServiceName:
    Description: "Name of the ECS service"
    Type: String
    Default: "my-ecs-service"
  TaskDefinitionFamily:
    Description: "Family name of the ECS task definition"
    Type: String
    Default: "my-task-family"
  ContainerImage:
    Description: "ECR Container image for the ECS task"
    Type: String
  ContainerPort:
    Description: "Container port for the ECS task"
    Type: Number
    Default: 80
  KmsKeyId:
    Description: "KMS Encryption Key ID"
    Type: String
  DesiredCount:
    Description: "Number of ECS tasks (pods)"
    Type: Number
    Default: 1
  EnableBackup:
    Description: "Enable backups (yes/no)"
    Type: String
    AllowedValues: [yes, no]
    Default: no

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-0de53d8956e8dcf80
    us-west-2:
      AMIID: ami-0d6621c01e8c2de2c
    # Add other regions and their AMIs as needed

Resources:
  KeyPair:
    Type: Custom::EC2KeyPair
    Condition: CreateKeyPair
    Properties:
      ServiceToken: !GetAtt KeyPairLambdaFunction.Arn
      KeyName: !Sub "${AWS::StackName}-keypair"

  KeyPairLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              try:
                  ec2 = boto3.client('ec2')
                  
                  if event['RequestType'] == 'Create':
                      key_pair_name = event['ResourceProperties']['KeyName']
                      
                      # Generate key pair
                      key_pair = ec2.create_key_pair(KeyName=key_pair_name)
                      response_data = {
                          'KeyName': key_pair['KeyName'],
                          'KeyMaterial': key_pair['KeyMaterial']
                      }
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  
                  elif event['RequestType'] == 'Delete':
                      key_pair_name = event['ResourceProperties']['KeyName']
                      
                      # Delete key pair
                      ec2.delete_key_pair(KeyName=key_pair_name)
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

      Runtime: python3.8
      Timeout: 300

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaEC2Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateKeyPair
                  - ec2:DeleteKeyPair
                Resource: "*"

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:UpdateContainerInstancesState
                  - ecs:Submit*
                Resource: "*"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-task-execution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - kms:Decrypt
                Resource: "*"

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ECS tasks"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ClusterName}-alb"
      Subnets:
        - Ref: PrivateSubnet1Id
        - Ref: PrivateSubnet2Id
      SecurityGroups:
        - Ref: ALBSecurityGroup
      Scheme: internal

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref TaskDefinitionFamily
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ClusterName}"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Ref: PrivateSubnet1Id
            - Ref: PrivateSubnet2Id
          SecurityGroups:
            - Ref: ECSSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetGroup

Outputs:
  ECSClusterName:
    Description: "ECS Cluster Name"
    Value: !Ref ECSCluster

  ECSServiceRoleARN:
    Description: "ECS Service Role ARN"
    Value: !GetAtt ECSServiceRole.Arn

  ECSTaskDefinitionARN:
    Description: "ECS Task Definition ARN"
    Value: !Ref ECSTaskDefinition

  ALBName:
    Description: "ALB Name"
    Value: !Ref ALB

  ALBListenerARN:
    Description: "ALB Listener ARN"
    Value: !Ref ALBListener

  ALBTargetGroupARN:
    Description: "ALB Target Group ARN"
    Value: !Ref ALBTargetGroup

Conditions:
  CreateKeyPair:
    Fn::Equals: [!Ref KeyName, ""]
  HasKeyName:
    Fn::Not: [!Condition CreateKeyPair]
